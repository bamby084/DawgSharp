{
  "name": "DawgSharp",
  "copyright": "2014 - 2017 Sergey Slepov",
  "authors": [ "Sergey Slepov" ],
  "version": "1.2.1",
  "runtimes": { "win": {} },

  "frameworks": {
    "net40": {
      "frameworkAssemblies": {
        "System": { "type": "build" },
        "System.Core": { "type": "build" }
      }
    },
    "net35": {
      "frameworkAssemblies": {
        "System": { "type": "build" },
        "System.Core": { "type": "build" }
      }
    },
    "netstandard1.6": {
      "imports": "dnxcore50",
      "dependencies": {
        "NETStandard.Library": "1.6.0"
      }
    }
  },

  "buildOptions": {
    "outputName": "DawgSharp",
    "keyFile": "../DawgSharp/key.snk",
    "compile": {
      "includeFiles": [
        "../DawgSharp/MatrixDawg.cs",
        "../DawgSharp/Dawg.cs",
        "../DawgSharp/IDawg.cs",
        "../DawgSharp/OldDawg.cs",
        "../DawgSharp/DawgBuilder.cs",
        "../DawgSharp/DawgExtensions.cs",
        "../DawgSharp/LevelBuilder.cs",
        "../DawgSharp/Node.cs",
        "../DawgSharp/NodeWrapper.cs",
        "../DawgSharp/NodeWrapperEqualityComparer.cs",
        "../DawgSharp/PrefixMatcher.cs",
        "../DawgSharp/YaleDawg.cs",
        "../DawgSharp/Properties/AssemblyInfo.cs"
      ]
    }
  },

  "packOptions": {
    "summary": "High-performance string dictionary in C#",
    "releaseNotes": "Added an icon to the package and bumped the package version to 1.2.1. The assembly version is still 1.2.0.",
    "tags": [ "DAWG string dictionary" ],
    "licenseUrl": "https://github.com/bzaar/DawgSharp/blob/master/LICENSE.txt",
    "projectUrl": "https://github.com/bzaar/DawgSharp",
    "iconUrl": "https://github.com/bzaar/DawgSharp/blob/master/icon.png",
    "requireLicenseAcceptance": false,
    "files": {
      "mappings": {
        "content/licenses/DawgSharp/LICENSE.txt": "../LICENSE.txt"
      }
    }
  },

  "description": "DAWG (Directed Acyclic Word Graph) is a data structure for storing and searching large word lists while keeping your memory footprint small and lookups fast. DawgSharp is an open-source C# implementation featuring a linear time graph reduction algorithm and out-of-the-box persistence support.

      The two main objects in the library are Dawg and DawgBuilder. Dawg is immutable, you must use DawgBuilder to build a Dawg and then save it to a stream. Then use Dawg.Load to rehydrate the data. Once reloaded, Dawg re-emerges as a completely different data structure (but, oddly, the same class) that is nearly as fast as a HashSet for lookups and is much, much more memory-efficient (factors of 30x - 40x are not uncommon). Please note that the Save/Load step is necessary to get the full potential out of the Dawg object. Use a MemoryStream if disk interaction is not desired.

      The Dawg class can be thought of as a read-only Dictionary <string, Value> type. It has the [\"string\"] indexer and implements IEnumerable <KeyValuePair <string, Value>>.

      One other very useful feature of Dawg (not found in Dictionary) is the ability to quickly find all words that start with a particular substring: dawg.MatchPrefix (\"star\") could possibly yield \"star\", \"starch\", \"start\", \"starting\", etc.

      This package is provided under the terms of the GNU GPL v3. Source code and documentation are available on GitHub: https://github.com/bzaar/DawgSharp. Commercial licenses are also available at http://morpher.co.uk"
}